---
group: 'svelteuidev-motion'
packageGroup: '@svelteuidev/motion'
title: 'Typewriter'
slug: /motion/typewriter/
category: 'transitions'
description: 'Type writer transition effect for text'
---

<script lang='ts'>
    // style tags used
    import {Prism} from '@svelteuidev/prism'
    import {typewriter} from '@svelteuidev/motion'
    import {Button} from '@svelteuidev/core'

	let visible = false;

    const toggleVisible = () => {
        visible = !visible
    }
    
    const code = `
    <script>
        import {typewriter} from '@svelteuidev/motion'
        
        let visible = false;

        const toggleVisible = () => {
            visible = !visible
        }
    <\/script>

    <div>
        {#if visible}
	        <p transition:typewriter>Transition</p>
        {/if}
    </div>
    <Button on:click={toggleVisible}>{!visible ? 'Play Transition' : 'Stop Transition'}</Button>
    `;
</script>

# {title}

{description}

<hr/>

## Usage

<div style="padding-left: 1rem; padding-right: 1rem;" class='h-20 space border rounded-md shadow-md flex items-center justify-between px-2'>
    <div class="">
        {#if visible}
	        <p in:typewriter>Now the transition is playing</p>
            {:else}
            <p>Click the button to play the transition</p>
        {/if}
    </div>
    <Button on:click={toggleVisible}>{!visible ? 'Play Transition' : 'Stop Transition'}</Button>
</div>

The typewriter transition will give your text a typed effect. Just like every other transition, it is triggered by an element entering or leaving the DOM as a result of a state change. If you attempt to use the typewriter transition on non text nodes, it will result in an error.

<Prism theme="twilight" language="tsx" message={code} block>{code}</Prism>

## Params

| Param  | Description                                                                                              |
| ------ | -------------------------------------------------------------------------------------------------------- |
| speed  | A decimal number representing the duration of the transition (in seconds)                                |
| easing | An easing function to be applied to the transition. Works with svelte easing and custom easing functions |

## TypeScript

You can import `TypewriterParams` interface type from `@svelteuidev/motion`:

```tsx
import type { TypewriterParams } from '@svelteuidev/motion';

interface TypewriterParams {
	speed?: number;
	easing?: EasingFunction;
}
```

## Definition

```tsx
function typewriter(node: HTMLElement, { speed }: TypewriterParams): TransitionConfig;
```
